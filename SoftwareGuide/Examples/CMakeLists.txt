project(Examples C)

# Macro defs

# This macro states that the executable "EXECUTABLE" upon execution will generate
# output image "OUTPUT_IMG". The executable will depend on "SOURCE_FILE" (since
# it is assumed that it was generated by compiling SOURCE_FILE), the perl script
# used to generate this macro, and any figures that may have been generated by
# other examples that the executable may use as inputs to produce the OUTPUT_IMG.
#
# TODO: Create a smarter macro. For an example that generates 3 outputs, 3 macros
# are created. This results in the example running 3 times, instead of once.
macro(RUN_EXAMPLE EXECUTABLE OUTPUT_IMG SOURCE_FILE)
  add_custom_command(
      OUTPUT      "${SoftwareGuide_BINARY_DIR}/Art/Generated/${OUTPUT_IMG}"
      COMMAND     "${ITK_EXECUTABLES_DIR}/${EXECUTABLE}"
      ARGS        ${ARGN}
      DEPENDS     ${RUN_EXAMPLES_SCRIPT} ${SOURCE_FILE} ${GENERATED_FIGURE_DEPS}
  )
endmacro(RUN_EXAMPLE)

# If we made the assumption that the input file needed for this example
# was generated by running some other example, let us explicitly
# state that dependency so that makefile rules fire in the right
# order.
macro(ADD_GENERATED_FIG_DEPS OUTPUT_IMG GENERATED_FIG)
  set( GENERATED_FIGURE_DEPS ${GENERATED_FIGURE_DEPS} "${SoftwareGuide_BINARY_DIR}/Art/Generated/${GENERATED_FIG}" )
endmacro( ADD_GENERATED_FIG_DEPS )

# Some images need normalization for proper display in the book.
# Create a convenience macro that normalizes SOME_IMG and produces
# a rescaled EPS_IMG using ImageMagick tools.
macro(CONVERT_AND_NORMALIZE_IMG SOME_IMG EPS_IMG PATH)
  if( NOT DEFINED ${EPS_IMG}_HAS_CUSTOM_COMMAND)
    add_custom_command(
        SOURCE      "${PATH}/${SOME_IMG}"
        COMMAND     ${IMAGEMAGICK_CONVERT_EXECUTABLE}
        ARGS        "-normalize" "${PATH}/${SOME_IMG}" "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
        DEPENDS     ${RUN_EXAMPLES_SCRIPT} "${SoftwareGuide_BINARY_DIR}/Art/Generated/${SOME_IMG}"
        OUTPUT      "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
    )
    set(${EPS_IMG}_HAS_CUSTOM_COMMAND 1)
  endif()
endmacro(CONVERT_AND_NORMALIZE_IMG)

# Same as before.. also flip the image in the process.
macro(CONVERT_AND_FLIP_AND_NORMALIZE_IMG SOME_IMG EPS_IMG PATH)
  if( NOT DEFINED ${EPS_IMG}_HAS_CUSTOM_COMMAND)
    add_custom_command(
        SOURCE      "${PATH}/${SOME_IMG}"
        COMMAND     ${IMAGEMAGICK_CONVERT_EXECUTABLE}
        ARGS        "-flip" "-normalize" "${PATH}/${SOME_IMG}" "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
        DEPENDS     ${RUN_EXAMPLES_SCRIPT} "${SoftwareGuide_BINARY_DIR}/Art/Generated/${SOME_IMG}"
        OUTPUT      "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
    )
    set(${EPS_IMG}_HAS_CUSTOM_COMMAND 1)
  endif()
endmacro(CONVERT_AND_FLIP_AND_NORMALIZE_IMG)

# Convert an image from some file format to EPS for inclusion in Latex using
# ImageMagick
macro(CONVERT_IMG SOME_IMG EPS_IMG PATH)
  if( NOT DEFINED ${EPS_IMG}_HAS_CUSTOM_COMMAND)
    add_custom_command(
        SOURCE      "${PATH}/${SOME_IMG}"
        COMMAND     ${IMAGEMAGICK_CONVERT_EXECUTABLE}
        ARGS        "${PATH}/${SOME_IMG}" "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
        DEPENDS     ${RUN_EXAMPLES_SCRIPT} "${SoftwareGuide_BINARY_DIR}/Art/Generated/${SOME_IMG}"
        OUTPUT      "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
    )
    set(${EPS_IMG}_HAS_CUSTOM_COMMAND 1)
  endif()
endmacro(CONVERT_IMG)

# Convert an image from some file format to EPS for inclusion in Latex using
# ImageMagick.. also flip in the process.
macro(CONVERT_AND_FLIP_IMG SOME_IMG EPS_IMG PATH)
  if( NOT DEFINED ${EPS_IMG}_HAS_CUSTOM_COMMAND)
    add_custom_command(
        SOURCE      "${PATH}/${SOME_IMG}"
        COMMAND     ${IMAGEMAGICK_CONVERT_EXECUTABLE}
        ARGS        "-flip" "${PATH}/${SOME_IMG}" "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
        DEPENDS     ${RUN_EXAMPLES_SCRIPT} "${SoftwareGuide_BINARY_DIR}/Art/Generated/${SOME_IMG}"
        OUTPUT      "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
    )
    set(${EPS_IMG}_HAS_CUSTOM_COMMAND 1)
  endif()
endmacro(CONVERT_AND_FLIP_IMG)

# Convert an image from some file format to EPS for inclusion in Latex using
# ImageMagick.. This image is an input image. A seperate macro is necessary
# cause input images do not have any dependecies
macro(CONVERT_INPUT_IMG SOME_IMG EPS_IMG PATH)
  if( NOT DEFINED ${EPS_IMG}_HAS_CUSTOM_COMMAND)
    add_custom_command(
        SOURCE      "${PATH}/${SOME_IMG}"
        COMMAND     ${IMAGEMAGICK_CONVERT_EXECUTABLE}
        ARGS        "${PATH}/${SOME_IMG}" "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
        DEPENDS     ${RUN_EXAMPLES_SCRIPT}
        OUTPUT      "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
    )
    set(${EPS_IMG}_HAS_CUSTOM_COMMAND 1)
  endif()
endmacro(CONVERT_INPUT_IMG)

# Convert an image from some file format to EPS for inclusion in Latex using
# ImageMagick.. This image is an input image. A seperate macro is necessary
# cause input images do not have any dependecies. Also flip
macro(CONVERT_AND_FLIP_INPUT_IMG SOME_IMG EPS_IMG PATH)
  if( NOT DEFINED ${EPS_IMG}_HAS_CUSTOM_COMMAND)
    add_custom_command(
        SOURCE      "${PATH}/${SOME_IMG}"
        COMMAND     ${IMAGEMAGICK_CONVERT_EXECUTABLE}
        ARGS        "-flip" "${PATH}/${SOME_IMG}" "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
        DEPENDS     ${RUN_EXAMPLES_SCRIPT}
        OUTPUT      "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
    )
    set(${EPS_IMG}_HAS_CUSTOM_COMMAND 1)
  endif()
endmacro(CONVERT_AND_FLIP_INPUT_IMG)


# Set/Get macros to set/get dependencies on file foo.tex
macro(SET_DEP_FOR_TEXFILE NAME VAL)
  set(${NAME} ${${NAME}} "${VAL}")
  #message("set: ${NAME}: ${${NAME}}")
endmacro(SET_DEP_FOR_TEXFILE)
macro(GET_DEP_FOR_TEXFILE NAME VAR)
  set(${VAR} ${${NAME}})
  #message("get: ${NAME}: ${${NAME}}")
endmacro(GET_DEP_FOR_TEXFILE)

# Macro to indicate that foo.tex depends on bar.eps
macro(ADD_DEP_TEX_ON_EPS_FIGS TEXFILE EPSIMG)
  get_filename_component(name "${TEXFILE}" NAME_WE)
  SET_DEP_FOR_TEXFILE("${name}-DEPS" "${SoftwareGuide_BINARY_DIR}/Art/${EPSIMG}")
  #message("Add dependency to ${TEXFILE} to ${EPSIMG}")
  GET_DEP_TEX_ON_EPS_FIGS("${TEXFILE}" deps)
  #message("Stored as ${deps}")
endmacro(ADD_DEP_TEX_ON_EPS_FIGS)

# Get macro to get the list of eps figures that are dependencies of foo.tex
macro(GET_DEP_TEX_ON_EPS_FIGS TEXFILE VAR)
  get_filename_component(name "${TEXFILE}" NAME_WE)
  #message("-- name: ${name} --")
  GET_DEP_FOR_TEXFILE("${name}-DEPS" ${VAR})
endmacro(GET_DEP_TEX_ON_EPS_FIGS)

#
# Find Perl executable

include(${CMAKE_ROOT}/Modules/FindPerl.cmake)
if( NOT PERL_FOUND )
  message("Perl executable was not found")
endif( NOT PERL_FOUND )
find_program(PERLCXXPARSER
  NAMES ${SoftwareGuide_SOURCE_DIR}/ParseCxxExamples.pl
)


add_custom_target(SoftwareGuideExamples  ALL echo)


#
# Search for all the example sources
#
file( GLOB_RECURSE ITK_EXAMPLES_SRCS  ${ITK_SOURCE_DIR}/Examples/*.cxx)

# It is recommended that the user build the figures from the Insight executables
# to generate the guide to ensure consistency.
if( BUILD_FIGURES )
  #
  # Generate .cmake files containing those macros defined above.
  #
  # First make a directory to store generated images
  make_directory( "${SoftwareGuide_BINARY_DIR}/Art/Generated" )
  set( GeneratedFolder "${SoftwareGuide_BINARY_DIR}/Art/Generated" )

  # Earlier versions of the book had all the images flipped upside down, legacy
  # issue.. So if this flag is set to ON, they will be flipped prior to inclusion
  # in the SW guide.
  if(ITK_FLIP_INPUTS_AND_THEIR_OUTPUTS)
    set(FILENAME "${SoftwareGuide_BINARY_DIR}/Art/Generated/Flipped_files.txt")
    file(WRITE ${FILENAME} "")
    foreach(FLIPIMG ${ITK_FLIP_IMG})
      file(APPEND ${FILENAME} "${FLIPIMG} ")
    endforeach(FLIPIMG)
  endif(ITK_FLIP_INPUTS_AND_THEIR_OUTPUTS)

  set(FILENAME2 "${SoftwareGuide_BINARY_DIR}/Art/Generated/GeneratedFiles.txt")
  file(WRITE ${FILENAME2} "")


  foreach(example ${ITK_EXAMPLES_SRCS})
    #
    # Configure .. copy needed source files
    #
    get_filename_component(EXAMPLE_FILE ${example} NAME)
    #configure_file(${example} ${Examples_BINARY_DIR}/${EXAMPLE_FILE}
    #  COPYONLY IMMEDIATE)

    #Clear Figure dependencies for this examples
    #A figure may be generated by another example
    set( GENERATED_FIGURE_DEPS "")

    # Run Perl script on each example to generate .cmake files
    get_filename_component(EXAMPLE_FILE_BASE ${example} NAME_WE)

    # Parse the source file, foo.cxx to generate a foo.cmake containing above macros.
    if(PERL_FOUND AND RUN_EXAMPLES_SCRIPT)
      set( ExampleCmakeFile "${Examples_BINARY_DIR}/${EXAMPLE_FILE_BASE}.cmake")
      get_filename_component(TEX_FILE ${example} NAME_WE)
      set(TEX_FILE ${SoftwareGuide_BINARY_DIR}/Examples/${TEX_FILE}.tex)
      exec_program(${PERL_EXECUTABLE} "${SoftwareGuide_BINARY_DIR}/Art/Generated"
        ${Examples_BINARY_DIR}
        ARGS      ${RUN_EXAMPLES_SCRIPT} ${example} ${ITK_EXECUTABLES_DIR} "${ITK_DATA_PATHS}" ${ExampleCmakeFile} ${TEX_FILE} ${GeneratedFolder}
      )
      # Include each of the generated .cmake files in dependencies list
      # only if the file is generated (if it has command line tags)
      include(${ExampleCmakeFile} OPTIONAL)

    endif(PERL_FOUND AND RUN_EXAMPLES_SCRIPT)
  endforeach(example)

  #
  # Parse Latex file for latex includes
  #
  if( PERL_FOUND AND PERLCXXPARSER )
    foreach(example ${ITK_EXAMPLES_SRCS})
    get_filename_component(TEX_FILE ${example} NAME_WE)
    set(TEX_FILE ${SoftwareGuide_BINARY_DIR}/Examples/${TEX_FILE}.tex)
    GET_DEP_TEX_ON_EPS_FIGS("${TEX_FILE}" deps)
    #message("Deps gotten from GET_DEP_TEX_ON_EPS_FIG are ${deps}")
    #get_filename_component(depsNAME ${deps} NAME)
    #message("File ${TEX_FILE} depends on: ${deps}")
    add_custom_command(
      SOURCE    ${example}
      COMMAND   ${PERL_EXECUTABLE}
      ARGS      ${PERLCXXPARSER} ${example} ${TEX_FILE}
      TARGET    SoftwareGuideExamples
      DEPENDS   ${PERLCXXPARSER} ${example} ${deps}
      OUTPUTS   ${TEX_FILE}
    )
    set(TEX_DEPENDENCIES ${TEX_DEPENDENCIES} ${TEX_FILE})
    endforeach(example)

  endif( PERL_FOUND AND PERLCXXPARSER )

else( BUILD_FIGURES )
  #
  # Parse Latex file for latex includes
  #
  if( PERL_FOUND AND PERLCXXPARSER )
    foreach(example ${ITK_EXAMPLES_SRCS})
    get_filename_component(TEX_FILE ${example} NAME_WE)
    set(TEX_FILE ${SoftwareGuide_BINARY_DIR}/Examples/${TEX_FILE}.tex)
    add_custom_command(
      SOURCE    ${example}
      COMMAND   ${PERL_EXECUTABLE}
      ARGS      ${PERLCXXPARSER} ${example} ${TEX_FILE}
      TARGET    SoftwareGuideExamples
      DEPENDS   ${PERLCXXPARSER} ${example}
      OUTPUTS   ${TEX_FILE}
    )
    set(TEX_DEPENDENCIES ${TEX_DEPENDENCIES} ${TEX_FILE})
    endforeach(example)

  endif( PERL_FOUND AND PERLCXXPARSER )

endif( BUILD_FIGURES )

add_custom_target(BuildTexFiles ALL DEPENDS ${TEX_DEPENDENCIES})

