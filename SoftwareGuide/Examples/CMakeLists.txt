project(Examples C)

# Macro defs

# This macro states that the executable "EXECUTABLE" upon execution will generate
# output image "OUTPUT_IMG". The executable will depend on "SOURCE_FILE" (since
# it is assumed that it was generated by compiling SOURCE_FILE), the python script
# used to generate this macro, and any figures that may have been generated by
# other examples that the executable may use as inputs to produce the OUTPUT_IMG.
#
# TODO: Create a smarter macro. For an example that generates 3 outputs, 3 macros
# are created. This results in the example running 3 times, instead of once.
macro(RUN_EXAMPLE EXECUTABLE OUTPUT_IMG SOURCE_FILE)
  add_custom_command(
      OUTPUT      "${ART_GENERATED_FOLDER}/${OUTPUT_IMG}"
      COMMAND     "${ITK_EXECUTABLES_DIR}/${EXECUTABLE}"
      ARGS        ${ARGN}
      DEPENDS     ${RUN_EXAMPLES_SCRIPT} ${SOURCE_FILE} ${GENERATED_FIGURE_DEPS}
  )
endmacro(RUN_EXAMPLE)

# If we made the assumption that the input file needed for this example
# was generated by running some other example, let us explicitly
# state that dependency so that makefile rules fire in the right
# order.
macro(ADD_GENERATED_FIG_DEPS OUTPUT_IMG GENERATED_FIG)
  set( GENERATED_FIGURE_DEPS ${GENERATED_FIGURE_DEPS} "${ART_GENERATED_FOLDER}/${GENERATED_FIG}" )
endmacro( ADD_GENERATED_FIG_DEPS )

# Some images need normalization for proper display in the book.
# Create a convenience macro that normalizes SOME_IMG and produces
# a rescaled EPS_IMG using ImageMagick tools.
macro(CONVERT_AND_NORMALIZE_IMG SOME_IMG EPS_IMG PATH)
  if( NOT DEFINED ${EPS_IMG}_HAS_CUSTOM_COMMAND)
    add_custom_command(
        SOURCE      "${PATH}/${SOME_IMG}"
        COMMAND     ${IMAGEMAGICK_CONVERT_EXECUTABLE}
        ARGS        "-normalize" "${PATH}/${SOME_IMG}" "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
        DEPENDS     ${RUN_EXAMPLES_SCRIPT} "${ART_GENERATED_FOLDER}/${SOME_IMG}"
        OUTPUT      "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
    )
    set(${EPS_IMG}_HAS_CUSTOM_COMMAND 1)
  else()
    message(STATUS "STATUS: ##### ${EPS_IMG}_HAS_CUSTOM_COMMAND was defined, so skipping standard macro behavior.")
  endif()
endmacro(CONVERT_AND_NORMALIZE_IMG)

# Same as before.. also flip the image in the process.
macro(CONVERT_AND_FLIP_AND_NORMALIZE_IMG SOME_IMG EPS_IMG PATH)
  if( NOT DEFINED ${EPS_IMG}_HAS_CUSTOM_COMMAND)
    add_custom_command(
        SOURCE      "${PATH}/${SOME_IMG}"
        COMMAND     ${IMAGEMAGICK_CONVERT_EXECUTABLE}
        ARGS        "-flip" "-normalize" "${PATH}/${SOME_IMG}" "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
        DEPENDS     ${RUN_EXAMPLES_SCRIPT} "${ART_GENERATED_FOLDER}/${SOME_IMG}"
        OUTPUT      "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
    )
    set(${EPS_IMG}_HAS_CUSTOM_COMMAND 1)
  else()
    message(STATUS "STATUS: ##### ${EPS_IMG}_HAS_CUSTOM_COMMAND was defined, so skipping standard macro behavior.")
  endif()
endmacro(CONVERT_AND_FLIP_AND_NORMALIZE_IMG)

# Convert an image from some file format to EPS for inclusion in Latex using
# ImageMagick
macro(CONVERT_IMG SOME_IMG EPS_IMG PATH)
  if( NOT DEFINED ${EPS_IMG}_HAS_CUSTOM_COMMAND)
    add_custom_command(
        SOURCE      "${PATH}/${SOME_IMG}"
        COMMAND     ${IMAGEMAGICK_CONVERT_EXECUTABLE}
        ARGS        "${PATH}/${SOME_IMG}" "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
        DEPENDS     ${RUN_EXAMPLES_SCRIPT} "${ART_GENERATED_FOLDER}/${SOME_IMG}"
        OUTPUT      "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
    )
    set(${EPS_IMG}_HAS_CUSTOM_COMMAND 1)
  else()
    message(STATUS "STATUS: ##### ${EPS_IMG}_HAS_CUSTOM_COMMAND was defined, so skipping standard macro behavior.")
  endif()
endmacro(CONVERT_IMG)

# Convert an image from some file format to EPS for inclusion in Latex using
# ImageMagick.. also flip in the process.
macro(CONVERT_AND_FLIP_IMG SOME_IMG EPS_IMG PATH)
  if( NOT DEFINED ${EPS_IMG}_HAS_CUSTOM_COMMAND)
    add_custom_command(
        SOURCE      "${PATH}/${SOME_IMG}"
        COMMAND     ${IMAGEMAGICK_CONVERT_EXECUTABLE}
        ARGS        "-flip" "${PATH}/${SOME_IMG}" "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
        DEPENDS     ${RUN_EXAMPLES_SCRIPT} "${ART_GENERATED_FOLDER}/${SOME_IMG}"
        OUTPUT      "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
    )
    set(${EPS_IMG}_HAS_CUSTOM_COMMAND 1)
  else()
    message(STATUS "STATUS: ##### ${EPS_IMG}_HAS_CUSTOM_COMMAND was defined, so skipping standard macro behavior.")
  endif()
endmacro(CONVERT_AND_FLIP_IMG)

# Convert an image from some file format to EPS for inclusion in Latex using
# ImageMagick.. This image is an input image. A seperate macro is necessary
# cause input images do not have any dependecies
macro(CONVERT_INPUT_IMG SOME_IMG EPS_IMG PATH)
  if( NOT DEFINED ${EPS_IMG}_HAS_CUSTOM_COMMAND)
    add_custom_command(
        SOURCE      "${PATH}/${SOME_IMG}"
        COMMAND     ${IMAGEMAGICK_CONVERT_EXECUTABLE}
        ARGS        "${PATH}/${SOME_IMG}" "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
        DEPENDS     ${RUN_EXAMPLES_SCRIPT}
        OUTPUT      "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
    )
    set(${EPS_IMG}_HAS_CUSTOM_COMMAND 1)
  else()
    message(STATUS "STATUS: ##### ${EPS_IMG}_HAS_CUSTOM_COMMAND was defined, so skipping standard macro behavior.")
  endif()
endmacro(CONVERT_INPUT_IMG)

# Convert an image from some file format to EPS for inclusion in Latex using
# ImageMagick.. This image is an input image. A seperate macro is necessary
# cause input images do not have any dependecies. Also flip
macro(CONVERT_AND_FLIP_INPUT_IMG SOME_IMG EPS_IMG PATH)
  if( NOT DEFINED ${EPS_IMG}_HAS_CUSTOM_COMMAND)
    add_custom_command(
        SOURCE      "${PATH}/${SOME_IMG}"
        COMMAND     ${IMAGEMAGICK_CONVERT_EXECUTABLE}
        ARGS        "-flip" "${PATH}/${SOME_IMG}" "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
        DEPENDS     ${RUN_EXAMPLES_SCRIPT}
        OUTPUT      "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
    )
    set(${EPS_IMG}_HAS_CUSTOM_COMMAND 1)
  else()
    message(STATUS "STATUS: ##### ${EPS_IMG}_HAS_CUSTOM_COMMAND was defined, so skipping standard macro behavior.")
  endif()
endmacro(CONVERT_AND_FLIP_INPUT_IMG)

#
# Find Python executable
include(${CMAKE_ROOT}/Modules/FindPythonInterp.cmake)
if( NOT PYTHONINTERP_FOUND )
  message(FATAL_ERROR "Python executable was not found")
endif( NOT PYTHONINTERP_FOUND )
find_program(PYTHONCXXPARSER NAMES ${SoftwareGuide_SOURCE_DIR}/ParseCxxExamples.py
)

add_custom_target(SoftwareGuideExamples  ALL echo)

#
# Search for all the example sources
#
file( GLOB_RECURSE ITK_EXAMPLES_SRCS  ${ITK_SOURCE_DIR}/Examples/*.cxx)

message(STATUS "PRE_RUN_PYTHNON ART GENERATION.")
message(STATUS "Running: ${PYTHON_EXECUTABLE} ${RUN_EXAMPLES_SCRIPT} --itkSource ${ITK_SOURCE_DIR} --itkBuildDir ${ITK_BINARY_DIR} --itkExecDir ${ITK_EXECUTABLES_DIR} --SWGuidBaseOutput ${SoftwareGuide_BINARY_DIR} "
  )
execute_process(
  COMMAND ${PYTHON_EXECUTABLE}
  ${RUN_EXAMPLES_SCRIPT}
  --itkSource ${ITK_SOURCE_DIR}
  --itkBuildDir ${ITK_BINARY_DIR}
  --itkExecDir ${ITK_EXECUTABLES_DIR}
  --SWGuidBaseOutput ${SoftwareGuide_BINARY_DIR}
  WORKING_DIRECTORY "${ART_GENERATED_FOLDER}"
  RESULT_VARIABLE    RUN_EXAMPLES_RESULT
    )
if( NOT ${RUN_EXAMPLES_RESULT} EQUAL 0)
  message(FATAL_ERROR "POST_RUN_PYTHNON ART GENERATION ${RUN_EXAMPLES_RESULT}.")
endif()


# Earlier versions of the book had all the images flipped upside down, legacy
# issue. So if this flag is set to ON, they will be flipped prior to inclusion
# in the SW guide.
if(ITK_FLIP_INPUTS_AND_THEIR_OUTPUTS)
  set(FILENAME "${ART_GENERATED_FOLDER}/Flipped_files.txt")
  file(WRITE ${FILENAME} "")
  foreach(FLIPIMG ${ITK_FLIP_IMG})
    file(APPEND ${FILENAME} "${FLIPIMG} ")
  endforeach(FLIPIMG)
endif(ITK_FLIP_INPUTS_AND_THEIR_OUTPUTS)

set(FILENAME2 "${ART_GENERATED_FOLDER}/GeneratedFiles.txt")
file(WRITE ${FILENAME2} "")

include(${SoftwareGuide_BINARY_DIR}/Examples/GeneratedDependancies.cmake)

#
# Parse Latex file for latex includes
#
set(TEX_DEPENDENCIES "")
if( PYTHONINTERP_FOUND AND PYTHONCXXPARSER )
  foreach(example ${ITK_EXAMPLES_SRCS})
    get_filename_component(TEX_FILE_BASE ${example} NAME_WE)
    set(TEX_FILE ${SoftwareGuide_BINARY_DIR}/Examples/${TEX_FILE_BASE}.tex)
    message(STATUS "File ${TEX_FILE} depends on: ${${TEX_FILE_BASE}-DEPS}")
    add_custom_command(
      SOURCE    ${example}
      COMMAND   ${PYTHON_EXECUTABLE}
      ARGS      ${PYTHONCXXPARSER} ${example} ${TEX_FILE}
      TARGET    SoftwareGuideExamples
      DEPENDS   ${PYTHONCXXPARSER} ${example} ${${TEX_FILE_BASE}-DEPS}
      OUTPUTS   ${TEX_FILE}
    )
    set(TEX_DEPENDENCIES ${TEX_DEPENDENCIES} ${TEX_FILE})
  endforeach(example)
endif( PYTHONINTERP_FOUND AND PYTHONCXXPARSER )

add_custom_target(BuildTexFiles ALL DEPENDS ${TEX_DEPENDENCIES})

